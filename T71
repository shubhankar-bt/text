import React from 'react';
import {
    Box,
    Button,
    Grid,
    Paper,
    TextField,
    Typography,
    MenuItem,
    Select,
    FormControl,
    InputLabel
} from '@mui/material';

/**
 * A reusable component for FR Return forms.
 * It dynamically renders rows with specified particulars and input fields.
 *
 * PROPS:
 * - title (string): The title of the report.
 * - columns (array): An array of objects defining the columns.
 * - id (string): Unique identifier for the column data.
 * - label (string): The text to display for the particular.
 * - type (string): 'text', 'textarea', or 'select'.
 * - options (array): Required for 'select' type. Array of { value, label }.
 * - rowData (object): An object containing the data for a single row, with keys matching column ids.
 * - onFieldChange (function): Callback function `(id, value)` executed on field change.
 * - onComplete (function): Callback function for the 'Complete' button.
 * - onBack (function): Callback function for the 'Back' button.
 * - disabledFields (object): An object with keys matching column ids and boolean values to disable fields.
 */
const FrReturnsReport = ({
    title,
    columns,
    rowData,
    onFieldChange,
    onComplete,
    onBack,
    disabledFields = {}
}) => {

    const renderInput = (col) => {
        const { id, type, options = [] } = col;
        const isDisabled = disabledFields[id] || false;

        switch (type) {
            case 'select':
                return (
                    <FormControl fullWidth variant="outlined" sx={{ textAlign: 'left' }}>
                        <InputLabel>{col.label}</InputLabel>
                        <Select
                            value={rowData[id] || ''}
                            onChange={(e) => onFieldChange(id, e.target.value)}
                            label={col.label}
                            disabled={isDisabled}
                        >
                            {options.map((option) => (
                                <MenuItem key={option.value} value={option.value}>
                                    {option.label}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                );
            case 'textarea':
                return (
                    <TextField
                        fullWidth
                        multiline
                        minRows={2} // Provides a default size similar to the original
                        variant="outlined"
                        placeholder="Enter Text"
                        value={rowData[id] || ''}
                        onChange={(e) => onFieldChange(id, e.target.value)}
                        onBlur={() => onFieldChange(id, rowData[id], true)} // Optional: for onBlur updates
                        disabled={isDisabled}
                        inputProps={{ maxLength: 4000 }}
                    />
                );
            default: // Handles 'text' and any other case
                return (
                    <TextField
                        fullWidth
                        variant="outlined"
                        placeholder="Enter Text"
                        value={rowData[id] || ''}
                        onChange={(e) => onFieldChange(id, e.target.value)}
                        onBlur={() => onFieldChange(id, rowData[id], true)} // Optional: for onBlur updates
                        disabled={isDisabled}
                        inputProps={{ maxLength: 4000 }}
                    />
                );
        }
    };

    return (
        <Paper elevation={3} sx={{ p: 3, m: 2 }}>
            <Box display="flex" alignItems="center" mb={2}>
                {onBack && (
                     <Button variant="contained" onClick={onBack} sx={{ mr: 2 }}>
                        Back
                     </Button>
                )}
                <Typography variant="h5">{title}</Typography>
            </Box>

            {/* Header Row */}
            <Grid container spacing={2} sx={{ borderBottom: 1, borderColor: 'divider', pb: 1, mb: 2 }}>
                <Grid item xs={6}>
                    <Typography variant="h6">Particulars</Typography>
                </Grid>
                <Grid item xs={6}>
                    <Typography variant="h6">Current Year</Typography>
                </Grid>
            </Grid>

            {/* Data Rows */}
            {columns.map((col) => (
                <Grid container spacing={2} key={col.id} alignItems="center" sx={{ mb: 2 }}>
                    <Grid item xs={6}>
                        <Typography variant="body1">{col.label}</Typography>
                    </Grid>
                    <Grid item xs={6}>
                        {renderInput(col)}
                    </Grid>
                </Grid>
            ))}

            {onComplete && (
                 <Box display="flex" justifyContent="center" mt={3}>
                    <Button variant="contained" color="success" onClick={onComplete}>
                        Complete
                    </Button>
                 </Box>
            )}
        </Paper>
    );
};

export default FrReturnsReport;


















import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { Dialog, DialogTitle, DialogContent, DialogActions, Button, Typography } from '@mui/material';

// Custom components and API services
import FrReturnsReport from './FrReturnsReport'; // The reusable component
import { getT71Data, insertOnLoad, updateField, submitIndividual } from './api/t71Api'; // Your API functions
import { useSnackbar } from 'notistack'; // For user feedback

const T71 = () => {
    const navigate = useNavigate();
    const { enqueueSnackbar } = useSnackbar();

    // State management
    const [reportId, setReportId] = useState(sessionStorage.getItem("frReportId") || null);
    const [rowData, setRowData] = useState({
        val1: '',
        val2: 'No', // Default value
        val3: '',
    });
    const [disabledFields, setDisabledFields] = useState({ val3: true });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [displayMessage, setDisplayMessage] = useState('');
    
    // Mimics the logic from ng-init="T71.insertOrUpdate()"
    useEffect(() => {
        const initializeReport = async () => {
            const status = sessionStorage.getItem("frReportSts");
            let currentReportId = reportId;

            try {
                if (!status || !currentReportId) {
                    // If no existing report, create one
                    const newReportData = await insertOnLoad({ rMId: "40024102" /*, other params*/ });
                    currentReportId = newReportData.reportId;
                    setReportId(currentReportId);
                    sessionStorage.setItem("frReportId", currentReportId); // Persist reportId
                } else {
                    // Fetch existing data
                    const data = await getT71Data(currentReportId);
                    // The API response is an array: [val1, val2, val3]
                    const [val1 = '', val2 = 'No', val3 = ''] = data;
                    setRowData({ val1, val2, val3 });
                }
            } catch (error) {
                console.error('Failed to initialize report:', error);
                enqueueSnackbar('Error initializing report data.', { variant: 'error' });
            }
        };

        initializeReport();
    }, []); // Empty dependency array ensures this runs only once on mount

    // Effect to control the disabled state of val3 based on val2
    useEffect(() => {
        setDisabledFields({ val3: rowData.val2 !== 'Yes' });
        // Implements the logic from checkVal() function
        if (rowData.val2 === 'No') {
            // Clear val3 if 'No' is selected
            setRowData(prevData => ({ ...prevData, val3: '' }));
        }
    }, [rowData.val2]);


    /**
     * Handles changes from the input fields in the reusable component.
     * Corresponds to T71.updateField() in the old controller.
     */
    const handleFieldChange = useCallback(async (id, value, isBlur = false) => {
        setRowData(prevData => ({ ...prevData, [id]: value }));

        // Only call update API on blur to avoid excessive calls, or for select changes
        if (isBlur || id === 'val2') {
             try {
                const key = id.substring(3); // 'val1' -> '1'
                await updateField({ reportId, key, value });
             } catch (error) {
                console.error(`Failed to update field ${id}:`, error);
                enqueueSnackbar('Failed to save changes.', { variant: 'error' });
             }
        }
    }, [reportId, enqueueSnackbar]);

    /**
     * Handles form submission.
     * Corresponds to T71.submitIndividual().
     */
    const handleComplete = async () => {
        try {
            const response = await submitIndividual({ reportId });
            if (response === 1) {
                const reportName = sessionStorage.getItem("frSubReportName") || 'T71';
                setDisplayMessage(`${reportName} report has been submitted successfully.`);
                setIsModalOpen(true);
            } else {
                 enqueueSnackbar('Submission failed. Please try again.', { variant: 'warning' });
            }
        } catch (error) {
            console.error('Submission failed:', error);
            enqueueSnackbar('An error occurred during submission.', { variant: 'error' });
        }
    };
    
    /**
     * Handles closing the success modal and navigating away.
     * Corresponds to T71.redirectToFRReturn().
     */
    const handleModalClose = () => {
        setIsModalOpen(false);
        navigate('/frt_maker/frReturn'); // Navigate back to the main page
    };

    // Definition of the form structure passed to the reusable component
    const columns = [
        {
            id: 'val1',
            label: 'Disclosure In Auditors Report',
            type: 'textarea',
        },
        {
            id: 'val2',
            label: 'Whether Auditors Report Has Been Qualified Or Has Any Reservations Or Contains Adverse Remarks',
            type: 'select',
            options: [
                { value: 'No', label: 'No' },
                { value: 'Yes', label: 'Yes' },
            ],
        },
        {
            id: 'val3',
            label: 'Auditors Qualifications Reservations Or Adverse Remarks In Auditors Report',
            type: 'textarea',
        },
    ];

    return (
        <>
            <FrReturnsReport
                title="Auditors Report (T71)"
                columns={columns}
                rowData={rowData}
                onFieldChange={handleFieldChange}
                onComplete={handleComplete}
                onBack={() => navigate(-1)} // Simple back navigation
                disabledFields={disabledFields}
            />
            <Dialog open={isModalOpen} onClose={handleModalClose}>
                <DialogTitle sx={{ bgcolor: 'success.main', color: 'white' }}>Success!</DialogTitle>
                <DialogContent sx={{ mt: 2 }}>
                    <Typography>{displayMessage}</Typography>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleModalClose} variant="contained" color="success">
                        Continue
                    </Button>
                </DialogActions>
            </Dialog>
        </>
    );
};

export default T71;





