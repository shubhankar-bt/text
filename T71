// src/services/apiService.js (additions)

// ... existing T68ApiService and FrReturnApiService code ...

/**
 * A collection of functions to interact with the T71 API endpoints.
 */
export const T71ApiService = {
    /**
     * Creates an initial Report Master List (RML) entry for T71.
     * @param {object} params - { qed, userId, rMId }
     */
    rmlEntry: (params) => {
        return fetchApi('/T71/insertRml', { body: JSON.stringify(params) });
    },

    /**
     * Gets the Report Master List (RML) ID for an existing T71 report.
     * @param {object} params - { qed, userId, rMId }
     */
    getRml: (params) => {
        return fetchApi('/T71/getRml', { body: JSON.stringify(params) });
    },

    /**
     * Fetches saved data for the T71 report.
     * Note: The response is expected as a flat array of strings.
     * @param {object} params - { reportId, qed }
     */
    getT71Data: (params) => {
        return fetchApi('/T71/getT71Data', { body: JSON.stringify(params) });
    },

    /**
     * Saves the T71 report data.
     * @param {object} params - The payload containing all question and remark data.
     */
    saveT71Data: (params) => {
        return fetchApi('/T71/saveT71Data', { body: JSON.stringify(params) });
    },
};















// src/components/FRReturnsReport.jsx

import React, { useState, useEffect, useCallback } from 'react';
import {
    Container,
    Typography,
    Button,
    Paper,
    Box,
    Grid,
    TextField,
    RadioGroup,
    FormControlLabel,
    Radio,
    FormControl,
    FormLabel,
    CircularProgress,
    Backdrop,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    DialogContentText,
} from '@mui/material';
import { ArrowBack as ArrowBackIcon } from '@mui/icons-material';
import { T71ApiService, FrReturnApiService } from '../services/apiService'; // Adjust path as needed

const initialFormData = {
    question1: 'No', remarks1: '',
    question2: 'No', remarks2: '',
    question3: 'No', remarks3: '',
    question4: 'No', remarks4: '',
    question5: 'No', remarks5: '',
    question6: 'No', remarks6: '',
    question7: 'No', remarks7: '',
    question8: 'No', remarks8: '',
};

// Static data for the questions to easily render them
const questions = [
    { id: 1, text: 'Whether the NBFC has been set up for the purpose of securitisation / reconstruction of financial assets?' },
    { id: 2, text: 'Whether the NBFC is engaged in any other business?' },
    { id: 3, text: 'If yes, whether the income from such business is more than the income from the business of securitisation / reconstruction of financial assets?' },
    { id: 4, text: 'Whether the NBFC has sponsored any other Securitisation Company/Reconstruction Company?' },
    { id: 5, text: 'Whether the NBFC has invested in the security receipts issued by other Securitisation Companies/Reconstruction Companies?' },
    { id: 6, text: 'If so, whether the investment is more than 10% of its owned fund?' },
    { id: 7, text: 'Whether the NBFC has converted any debt into equity?' },
    { id: 8, text: 'Whether the NBFC is a corporate body?' },
];

const FRReturnsReport = ({ initialReportId, qed, userId, reportName }) => {
    const [formData, setFormData] = useState(initialFormData);
    const [reportId, setReportId] = useState(initialReportId);
    const [isLoading, setIsLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [modal, setModal] = useState({ open: false, message: '' });

    // --- Data Fetching and Initialization ---
    useEffect(() => {
        const initializeReport = async () => {
            const status = sessionStorage.getItem("frReportSts");
            const rmlParams = { qed, userId, rMId: "40024005" }; // rMId for T71

            try {
                if (!status || status.length === 0) {
                    const newReportId = await T71ApiService.rmlEntry(rmlParams);
                    setReportId(newReportId);
                } else {
                    const existingReportId = await T71ApiService.getRml(rmlParams);
                    setReportId(existingReportId);

                    if (parseInt(status, 10) > 10) {
                        const data = await T71ApiService.getT71Data({ reportId: existingReportId, qed });
                        
                        // Map the flat array response to the structured formData state
                        // This mapping is based on the logic in the legacy T71Controller.
                        if (Array.isArray(data)) {
                            setFormData({
                                question1: data[0] || 'No', remarks1: data[1] || '',
                                question2: data[2] || 'No', remarks2: data[3] || '',
                                question3: data[4] || 'No', remarks3: data[5] || '',
                                question4: data[6] || 'No', remarks4: data[7] || '',
                                question5: data[8] || 'No', remarks5: data[9] || '',
                                question6: data[10] || 'No', remarks6: data[11] || '',
                                question7: data[12] || 'No', remarks7: data[13] || '',
                                question8: data[14] || 'No', remarks8: data[15] || '',
                            });
                        }
                    }
                }
            } catch (error) {
                console.error("Failed during report initialization:", error);
            } finally {
                setIsLoading(false);
            }
        };

        if (userId) initializeReport();
        else setIsLoading(false);
    }, [qed, userId]);

    // --- Event Handlers ---
    const handleChange = useCallback((event) => {
        const { name, value } = event.target;
        setFormData(prevData => ({
            ...prevData,
            [name]: value,
        }));
    }, []);

    const handleSubmit = async (event) => {
        event.preventDefault(); // Prevent default form submission
        setIsSubmitting(true);

        const params = {
            reportId,
            qed,
            question1: formData.question1, remarks1: formData.remarks1,
            question2: formData.question2, remarks2: formData.remarks2,
            question3: formData.question3, remarks3: formData.remarks3,
            question4: formData.question4, remarks4: formData.remarks4,
            question5: formData.question5, remarks5: formData.remarks5,
            question6: formData.question6, remarks6: formData.remarks6,
            question7: formData.question7, remarks7: formData.remarks7,
            question8: formData.question8, remarks8: formData.remarks8,
        };

        try {
            // First, save the data
            await T71ApiService.saveT71Data(params);
            
            // Then, submit the report for completion
            await FrReturnApiService.submitIndividual({ reportId, qed });
            
            setModal({
                open: true,
                message: `${reportName || 'Report'} has been submitted successfully.`
            });

        } catch (error) {
            console.error("Failed to submit report:", error);
            setModal({
                open: true,
                message: `Error: Failed to submit report. ${error.message}`
            });
        } finally {
            setIsSubmitting(false);
        }
    };
    
    const handleCloseModal = () => {
        setModal({ open: false, message: '' });
        // Redirect logic can be placed here, e.g., using react-router-dom
        console.log("Redirecting to main FR Return page...");
        // history.push('/frt_maker/frReturn');
    };

    return (
        <Container maxWidth="lg" sx={{ my: 4 }}>
            <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }} open={isLoading || isSubmitting}>
                <CircularProgress color="inherit" />
            </Backdrop>

            <Paper elevation={3} sx={{ p: 3, mb: 3, textAlign: 'center' }}>
                <Typography variant="h4" component="h1">FR Returns Report</Typography>
                <Typography variant="h6">{reportName}</Typography>
            </Paper>

            <Paper elevation={3} sx={{ p: { xs: 2, md: 4 } }}>
                <Box sx={{ mb: 3 }}>
                    <Button
                        variant="contained"
                        startIcon={<ArrowBackIcon />}
                        onClick={() => window.history.back()}
                    >
                        Back
                    </Button>
                </Box>
                
                <Box component="form" onSubmit={handleSubmit}>
                    {questions.map((q) => (
                        <Paper key={q.id} variant="outlined" sx={{ p: 3, mb: 3 }}>
                            <Grid container spacing={2} alignItems="center">
                                <Grid item xs={12} md={8}>
                                    <FormControl component="fieldset" required>
                                        <FormLabel component="legend">{q.id}. {q.text}</FormLabel>
                                        <RadioGroup
                                            row
                                            aria-label={`question ${q.id}`}
                                            name={`question${q.id}`}
                                            value={formData[`question${q.id}`]}
                                            onChange={handleChange}
                                        >
                                            <FormControlLabel value="Yes" control={<Radio />} label="Yes" />
                                            <FormControlLabel value="No" control={<Radio />} label="No" />
                                        </RadioGroup>
                                    </FormControl>
                                </Grid>
                                <Grid item xs={12} md={4}>
                                    <TextField
                                        fullWidth
                                        label="Remarks"
                                        name={`remarks${q.id}`}
                                        value={formData[`remarks${q.id}`]}
                                        onChange={handleChange}
                                        variant="outlined"
                                        multiline
                                        rows={2}
                                    />
                                </Grid>
                            </Grid>
                        </Paper>
                    ))}
                    <Box sx={{ mt: 4, textAlign: 'center' }}>
                        <Button 
                            type="submit" 
                            variant="contained" 
                            color="success"
                            size="large"
                            disabled={isSubmitting}
                        >
                            Complete
                        </Button>
                    </Box>
                </Box>
            </Paper>

            <Dialog open={modal.open} onClose={handleCloseModal}>
                <DialogTitle>Submission Status</DialogTitle>
                <DialogContent>
                    <DialogContentText>{modal.message}</DialogContentText>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleCloseModal} color="primary" autoFocus>
                        Continue
                    </Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default FRReturnsReport;





