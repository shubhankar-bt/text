import {
  // ... other existing imports from @mui/material
  TableCell,
  TableRow,
  Typography,
  TextField,
  Select,
  MenuItem,
} from '@mui/material';
import FormInput from '../../../../common/components/ui/FormInput'; // Assuming this is the path

// ... inside the FRReturnsReport component's return statement

<TableBody>
  {rows.map((row, rowIndex) => (
    <TableRow hover key={rowIndex}>
      {row.map((item, index) => (
        <TableCell key={`${rowIndex}-${index}-${item.title || ''}`} {...item.cellProps}>
          {/* Renders static titles in cells */}
          {item.title && !(item.dataIndex >= 0) && (
            <Typography {...item.cellProps}>{item.title}</Typography>
          )}

          {/* Renders input fields based on dataIndex */}
          {!item.title && item.dataIndex >= 0 && (() => {
            const inputType = item.cellProps?.inputType;

            // Common properties for all input controls
            const commonProps = {
              value: data[item.dataIndex] ?? '',
              onChange: (e) => onCellChange(item, e.target.value),
              onBlur: (e) => onCellBlur(item, e.target.value),
              disabled: item.cellProps?.readOnly || item.cellProps?.disabled,
              fullWidth: true,
              size: 'small',
            };

            // --- RENDER LOGIC FOR DIFFERENT INPUT TYPES ---

            // 1. SELECT (Dropdown)
            if (inputType === 'select') {
              return (
                <Select {...commonProps} variant="outlined">
                  {(item.cellProps.options || []).map((option) => (
                    <MenuItem key={option} value={option}>
                      {option}
                    </MenuItem>
                  ))}
                </Select>
              );
            }

            // 2. TEXTAREA (Multiline Text)
            if (inputType === 'textarea') {
              return (
                <TextField
                  {...commonProps}
                  multiline
                  variant="outlined"
                  placeholder={item.cellProps?.placeholder}
                  inputProps={{ maxLength: item.cellProps?.maxLength }}
                  [span_0](start_span)// This replicates the auto-height behavior from the original JSP[span_0](end_span)
                  onInput={(e) => {
                    e.target.style.height = 'auto';
                    e.target.style.height = `${e.target.scrollHeight}px`;
                  }}
                />
              );
            }

            // 3. FALLBACK to the original FormInput for numeric values
            return (
              <FormInput
                value={data[item.dataIndex] || item.defaultValue || ''}
                onChange={(e) => onCellChange(item, e.target.value)}
                onBlur={(e) => onCellBlur(item, e.target.value)}
                inputType={inputType || 'wholeAmountDecimal'}
                debounceDuration={1}
                size={'full'}
                {...item.cellProps}
              />
            );
          })()}
        </TableCell>
      ))}
    </TableRow>
  ))}
</TableBody>



















import { Box } from '@mui/material';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useLocation } from 'react-router-dom';
import useCustomSnackbar from '../../../../common/hooks/useCustomSnackbar';
import useApi from '../../../../common/hooks/useApi';
import FRReturnsReport from '../components/FRReturnsReport';

export default function T71() {
  const { state } = useLocation();
  const report = state?.report;
  const user = JSON.parse(localStorage.getItem('user'));

  const [isLoading, setIsLoading] = useState(true);
  const [reportId, setReportId] = useState(report?.subReportFR_RID || null);
  const [data, setData] = useState({ val1: '', val2: 'No', val3: '' });
  const [editable, setEditable] = useState(true); // Assuming the form is always editable for now

  const { callApi } = useApi();
  const snackbar = useCustomSnackbar();

  // API definitions for T71 report
  const api = useMemo(
    () => ({
      callT71FetchData: async (reportId) => {
        const REST_SERVICE_URI = '/T71/getT71Data';
        return await callApi(REST_SERVICE_URI, { reportId }, 'POST');
      },
      callT71InsertOnLoad: async (params) => {
        let INSERT_URI = '/T71/insertOnLoad';
        return await callApi(INSERT_URI, params, 'POST');
      },
      updateField: async (params) => {
        let UPDATE_URI = '/T71/updateField';
        const response = await callApi(UPDATE_URI, params, 'POST');
        return { success: response };
      },
    }),
    [callApi]
  );

  // Function to save a field's value to the backend
  const saveField = useCallback(
    async (fieldName, value) => {
      if (!reportId) return;
      try {
        const key = fieldName.substring(3); // "val1" -> "1"
        const payload = {
          reportId: reportId.toString(),
          key: key,
          value: value.toString(),
        };
        await api.updateField(payload);
      } catch (error) {
        if (error.code !== 'ERR_CANCELED') {
          console.error('Failed to save data:', error);
          snackbar('Failed to save data!', 'error');
        }
      }
    },
    [reportId, api, snackbar]
  );

  // Handles value changes in any input field
  const handleCellChange = useCallback(
    (item, newValue) => {
      const fieldName = item.fieldName;
      
      [span_1](start_span)[span_2](start_span)// Special logic from checkVal() and ng-disabled[span_1](end_span)[span_2](end_span)
      if (fieldName === 'val2' && newValue === 'No') {
        // If 'No' is selected, clear val3
        setData((prev) => ({ ...prev, val2: 'No', val3: '' }));
      } else {
        setData((prev) => ({ ...prev, [fieldName]: newValue }));
      }
    },
    []
  );
  
  // Persists data when an input field loses focus
  const handleCellBlur = useCallback(
    (item, value) => {
      if (!item) return;
      const fieldName = item.fieldName;
      saveField(fieldName, value);
      
      [span_3](start_span)// If 'No' was selected, the now-empty val3 must also be saved.[span_3](end_span)
      if (fieldName === 'val2' && value === 'No') {
          saveField('val3', '');
      }
    },
    [saveField]
  );

  // Load initial data for the report
  useEffect(() => {
    const init = async () => {
      setIsLoading(true);
      try {
        let responseData;
        const reportStatus = report?.subReportStatus;

        if (reportStatus === null || reportStatus === '') {
          const payload = { qed: user.quarterEndDate, userId: user.userId, rMId: '40024102' };
          const newReportId = await api.callT71InsertOnLoad(payload);
          setReportId(newReportId);
          // Set initial state as the backend would be empty
          setData({ val1: '', val2: 'No', val3: '' });
        } else {
          responseData = await api.callT71FetchData(reportId);
          if (responseData && responseData.length >= 3) {
            setData({
              val1: responseData[0] || '',
              val2: responseData[1] || 'No',
              val3: responseData[2] || '',
            });
          }
        }
      } catch (error) {
        if (error.code !== 'ERR_CANCELED') {
          console.error(error);
          snackbar('Failed to Fetch Data!', 'error');
          setData({ val1: '', val2: 'No', val3: '' }); // Ensure data is in a valid state on error
        }
      } finally {
        setIsLoading(false);
      }
    };

    init();
  }, [api, report, reportId, user, snackbar]);

  // Transforms the state object into a flat array for the reusable component
  const viewData = useMemo(() => {
    return [data.val1, data.val2, data.val3];
  }, [data]);
  
  // Defines the structure and properties of the report rows
  const rows = useMemo(() => [
    [
      { title: '1' },
      [span_4](start_span){ title: 'Disclosure In Auditors Report' }, //[span_4](end_span)
      {
        dataIndex: 0,
        fieldName: 'val1',
        cellProps: {
          inputType: 'textarea', // Use custom textarea rendering
          placeholder: 'Enter Text',
          maxLength: 4000,
          readOnly: !editable,
        },
      },
    ],
    [
      { title: '2' },
      [span_5](start_span){ title: 'Whether Auditors Report Has Been Qualified Or Has Any Reservations Or Contains Adverse Remarks' }, //[span_5](end_span)
      {
        dataIndex: 1,
        fieldName: 'val2',
        cellProps: {
          inputType: 'select', // Use custom select rendering
          options: ['No', 'Yes'],
          readOnly: !editable,
        },
      },
    ],
    [
      { title: '3' },
      [span_6](start_span){ title: 'Auditors Qualifications Reservations Or Adverse Remarks In Auditors Report' }, //[span_6](end_span)
      {
        dataIndex: 2,
        fieldName: 'val3',
        cellProps: {
          inputType: 'textarea',
          placeholder: 'Enter Text',
          maxLength: 4000,
          [span_7](start_span)// This replicates the ng-disabled="T71.val2 != 'Yes'" logic[span_7](end_span)
          disabled: data.val2 !== 'Yes',
          readOnly: !editable,
        },
      },
    ],
  ], [editable, data.val2]);

  return (
    <Box sx={{ mt: 2, mb: 4, width: '100%' }}>
      <FRReturnsReport
        reportId={reportId}
        qed={user.quarterEndDate}
        columns={[
          { title: 'Sr No', cellProps: { sx: { width: '5%' } } },
          { title: 'Particulars', cellProps: { sx: { width: '55%' } } },
          { title: 'Current Year', cellProps: { sx: { width: '40%' } } },
        ]}
        rows={rows}
        data={viewData} // Pass the derived flat array
        isLoading={isLoading}
        onCellChange={handleCellChange}
        onCellBlur={handleCellBlur}
        completeButtonEnabled={editable}
      />
    </Box>
  );
}





