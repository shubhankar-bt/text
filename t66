import React, { useState, useEffect, useCallback } from 'react';
import {
  Container,
  Typography,
  Button,
  IconButton,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  TextField,
  Paper,
  Box,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  CircularProgress,
  Backdrop,
  useTheme,
  Stack,
} from '@mui/material';
import {
  Add as AddIcon,
  Save as SaveIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  ArrowBack as ArrowBackIcon,
} from '@mui/icons-material';
import { T68ApiService, FrReturnApiService } from '../notes-to-accounts/Table68Api';
import { useLocation, useNavigate } from 'react-router-dom';
import { CustomButton } from '../../../../common/components/ui/Buttons';
import useCustomSnackbar from '../../../../common/hooks/useCustomSnackbar';
import useApi from '../../../../common/hooks/useApi';
import FormInput from '../../../../common/components/ui/FormInput';
import { current } from '@reduxjs/toolkit';

const parseFloatOrZero = (value) => {
  const parsed = parseFloat(value);
  return isNaN(parsed) ? 0 : parsed;
};

const Table68 = () => {
  const [rows, setRows] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [modal, setModal] = useState({ open: false, message: '' });

  const { callApi } = useApi();
  const showSnackBar = useCustomSnackbar();
  const user = JSON.parse(localStorage.getItem('user'));
  const { state } = useLocation();
  const report = state?.report;
  const [reportId, setReportId] = useState(null);
  const reportName = report.subReportName;
  const qed = user.quarterEndDate;
  const navigate = useNavigate();
  const [editCache, setEditCache] = useState({});

  useEffect(() => {
    const fetchData = async () => {
      try {
        console.log('report : ', report);

        const status = report.subReportStatus;
        console.log('status : ', status);

        const rmlParams = {
          qed: qed,
          userId: user.userId,
          rMId: '40024003',
        };

        if (!status || status.length === 0) {
          console.log('No report status found, creating new report entry...');
          const newReportId = await T68ApiService.rmlEntry(rmlParams, callApi);
          setReportId(newReportId);
        } else {
          console.log('Existing report status found, validating report ID...');
          const validatedReportId = await T68ApiService.getRml(rmlParams, callApi);
          if (validatedReportId) {
            setReportId(validatedReportId);

            if (status && parseInt(status, 10) > 10) {
              console.log('Status > 10, fetching saved data...');
              const params = { reportId: validatedReportId, qed };

              const savedData = await T68ApiService.getSavedData(params, callApi);

              if (Array.isArray(savedData)) {
                const initialRows = savedData.map((row) => ({
                  ...row,
                  id: row.srno,
                  isEditing: false,
                  flag: 'U',
                }));
                setRows(initialRows);
              }
            }
          } else {
            console.log('Failed to retrive report ID');
            showSnackBar('Some unexpected event occurred, Please refresh the page', 'warning');
          }
        }
      } catch (error) {
        if (error.code !== 'ERR_CANCELED') {
          console.error(error);
          showSnackBar('Failed to initialize data!', 'error');
        }
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, []);

  // --- Event Handlers ---

  const handleInputChange = (id, event) => {
    const { name, value } = event.target;

    // Use the functional update form of setRows (prevRows => ...)
    // This ensures each update works on the most recent state, preventing race conditions.
    setRows((prevRows) =>
      prevRows.map((row) => {
        if (row.id === id) {
          const updatedRow = { ...row, [name]: value };

          // Keep the auto-calculation logic for the total amount
          if (name === 'insertedVal2' || name === 'insertedVal3') {
            const principal = parseFloatOrZero(name === 'insertedVal2' ? value : row.insertedVal2);
            const interest = parseFloatOrZero(name === 'insertedVal3' ? value : row.insertedVal3);
            updatedRow.insertedVal4 = (principal + interest).toFixed(2);
          }

          return updatedRow;
        }

        // For all other rows, return them unchanged
        return row;
      })
    );
  };

  const handleAddRow = async () => {
    setIsLoading(true);
    try {
      const newRowId = await T68ApiService.getNewRowId('40024003', callApi);
      const newRow = {
        id: newRowId,
        srno: newRowId,
        flag: 'I', // Insert flag
        isEditing: true, // New rows are immediately editable
        insertedVal1: '',
        insertedVal2: '',
        insertedVal3: '',
        insertedVal4: '0.00',
        insertedVal5: '',
        insertedVal6: '',
        insertedVal7: '',
        insertedVal8: '',
        insertedVal9: '',
        insertedVal10: '',
        insertedVal11: '',
        insertedVal12: '',
      };
      setRows((prevRows) => [...prevRows, newRow]);
    } catch (error) {
      console.error('Failed to get new row ID:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleEditRow = (id) => {
    const rowToEdit = rows.find((row) => row.id === id);

    setEditCache((prevCache) => ({
      ...prevCache,
      [id]: { ...rowToEdit, isEditing: false },
    }));
    setRows((currentRows) => currentRows.map((row) => (row.id === id ? { ...row, isEditing: true } : row)));
    // setRows(rows.map((row) => (row.id === id ? { ...row, isEditing: true } : row)));
  };

  const handleCancelEdit = (id) => {
    // Find the row in the current state to check its properties
    const rowToCancel = rows.find((row) => row.id === id);

    // If for some reason the row doesn't exist, do nothing.
    if (!rowToCancel) return;

    // SCENARIO 1: The row is a new one that hasn't been saved yet.
    if (rowToCancel.flag === 'I') {
      // To "cancel" an add, we simply filter the new row out of our state.
      setRows((prevRows) => prevRows.filter((r) => r.id !== id));
    }
    // SCENARIO 2: The row is an existing one that was being edited.
    else {
      const originalRow = editCache[id];
      if (originalRow) {
        // Restore the original data from the cache for the existing row.
        setRows((currentRows) => currentRows.map((row) => (row.id === id ? originalRow : row)));

        // Clean up the cache by removing the entry.
        setEditCache((prevCache) => {
          const { [id]: removedItem, ...restOfCache } = prevCache;
          return restOfCache;
        });
      }
    }

    // const originalData = editCache[id];
    // if (originalData) {
    //   setRows((currentRows) => currentRows.map((row) => (row.id === id ? originalData : row)));
    // }

    // setEditCache((prevCache) => {
    //   const newCache = { ...prevCache };
    //   delete newCache[id];
    //   return newCache;
    // });
  };

  const handleSaveRow = async (id) => {
    const rowToSave = rows.find((row) => row.id === id);
    if (!rowToSave) return;

    setIsLoading(true);
    const payload = {
      reportId: reportId.toString(),
      qed: qed,
      rowId: parseInt(rowToSave.id, 10),
      dataFlag: rowToSave.flag,
      T68_DESC: rowToSave.insertedVal1,
      PRN_AMT: parseFloatOrZero(rowToSave.insertedVal2),
      INT_AMT: parseFloatOrZero(rowToSave.insertedVal3),
      TOT_AMT: parseFloatOrZero(rowToSave.insertedVal4),
      INT_MSMED: parseFloatOrZero(rowToSave.insertedVal5),
      SUPR_AMT: parseFloatOrZero(rowToSave.insertedVal6),
      INT_PRD_AMT: parseFloatOrZero(rowToSave.insertedVal7),
      INT_ACC_REM: parseFloatOrZero(rowToSave.insertedVal8),
      FUR_SUC_AMT: parseFloatOrZero(rowToSave.insertedVal9),
      MAX_AMT_MSME: parseFloatOrZero(rowToSave.insertedVal10),
      SUPR_NAME_MSME: rowToSave.insertedVal11,
      CIN_MSME: rowToSave.insertedVal12,
    };

    try {
      const response = await T68ApiService.saveRow(payload, callApi);
      if (response.toString() === 'true') {
        showSnackBar('Row saved succesfully.', 'success');
        setRows(rows.map((row) => (row.id === id ? { ...row, isEditing: false, flag: 'U' } : row)));
        // Clean up the cache by removing the entry.
      } else {
        showSnackBar('Failed to save row', 'error');
      }
    } catch (error) {
      console.error('Failed to save row:', error);
      showSnackBar('Failed to save row', 'error');
    } finally {
      setIsLoading(false);
      setEditCache((prevCache) => {
        const { [id]: removedItem, ...restOfCache } = prevCache;
        return restOfCache;
      });
    }
  };

  const handleDeleteRow = async (id) => {
    setIsLoading(true);
    try {
      const payload = { rowId: id, reportId: reportId.toString(), qed: qed };
      const response = await T68ApiService.deleteRow(payload, callApi);
      setRows(rows.filter((row) => row.id !== id));
      if (response.toString() === 'true') {
        showSnackBar('Row deleted succesfully.', 'warning');
      } else {
        showSnackBar('Failed to delete row', 'error');
      }
    } catch (error) {
      console.error('Failed to delete row:', error);
      showSnackBar('Failed to delete row', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmitReport = async () => {
    setIsSubmitting(true);
    try {
      const payload = {
        reportId: reportId.toString(),
        qed: qed,
      };
      const response = await FrReturnApiService.submitIndividual(payload, callApi);
      if (response === 1) {
        showSnackBar('report has been submitted successfully.', 'success');
        navigate('../');
      } else {
        setModal({
          open: true,
          message: `Error: Failed to submit report.`,
        });
      }
    } catch (error) {
      console.error('Failed to submit report:', error);
      setModal({
        open: true,
        message: `Error: Failed to submit report.`,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCloseModal = () => {
    setModal({ open: false, message: '' });
  };

  const handleValidation = useCallback(
    (rowId, event) => {
      const { name, value } = event.target;

      if (!value) return;

      let isValid = true;
      let errorMessage = '';
      let validationType = '';

      // Determine which validation to run based on the input's name
      if (name === 'insertedVal11') {
        validationType = 'name';
      } else if (name === 'insertedVal12') {
        validationType = 'alpha';
      } else {
        return;
      }

      if (validationType === 'name') {
        const nameRegex = /^([A-Za-z]+[ ]+)+[A-Za-z]+$|^([A-Za-z]+[ ]+[A-Za-z])+$/;
        if (!nameRegex.test(value)) {
          isValid = false;
          errorMessage = 'At least 2 words are required. Numbers & special characters are not allowed.';
        }
      } else if (validationType === 'alpha') {
        const alphaRegex = /^[A-Za-z.\s]*$/;
        if (!alphaRegex.test(value)) {
          isValid = false;
          errorMessage = 'Only alphabets, dots, and spaces are allowed.';
        }
      }

      if (!isValid) {
        showSnackBar(errorMessage, 'error');

        setRows((prevRows) =>
          prevRows.map((row) => {
            if (row.id === rowId) {
              // Return a new version of the row with the invalid field cleared.
              return { ...row, [name]: '' };
            }
            return row;
          })
        );
      }
      console.log('In onBlur', name, value);
    },
    [showSnackBar]
  ); // useCallback with an empty dependency array as setRows is stable.

  const columns = [
    {
      id: 'insertedVal1',
      label: 'Details of Micro Small Medium Enterprises',
      minWidth: 250,
      align: 'left',
      renderCell: (row) => (
        <FormInput
          inputType="inputValue"
          name="insertedVal1"
          value={row.insertedVal1 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          maxLength={50}
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal2',
      label: 'Principal Due Remaining Unpaid',
      minWidth: 220,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal2"
          value={row.insertedVal2 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal3',
      label: 'Interest Due Remaining Unpaid',
      minWidth: 220,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal3"
          value={row.insertedVal3 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal4',
      label: 'Total Principal and Interest Due Remaining Unpaid',
      minWidth: 220,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal4"
          value={row.insertedVal4 || '0.00'}
          readOnly={true}
          placeholder="Calculated value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal5',
      label: 'Amount of Interest Paid Under MSMED Act 2006',
      minWidth: 220,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal5"
          value={row.insertedVal5 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal6',
      label: 'Amount of Payments Made to Supplier Beyond Due Date During Year',
      minWidth: 250,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal6"
          value={row.insertedVal6 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal7',
      label: 'Amount of Interest Due and Payable for Period',
      minWidth: 220,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal7"
          value={row.insertedVal7 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal8',
      label: 'Amount of Interest Accrued and Remaining Unpaid at End of AccountingYear',
      minWidth: 260,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal8"
          value={row.insertedVal8 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal9',
      label: 'Amount of Further Interest Due and Payable Even in Succeeding Year',
      minWidth: 260,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal9"
          value={row.insertedVal9 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal10',
      label: 'Maximum Amount Outstanding for Period From Micro Small MediumEnterprise',
      minWidth: 260,
      align: 'right',
      renderCell: (row) => (
        <FormInput
          inputType="amountInput"
          name="insertedVal10"
          value={row.insertedVal10 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal11',
      label: 'Name Supplier Being Micro Small Medium Enterprises',
      minWidth: 260,
      align: 'left',
      renderCell: (row) => (
        <FormInput
          inputType="alphaNumWithSpaceTrim"
          name="insertedVal11"
          value={row.insertedVal11 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          validateOnlyOnBlur
          onBlur={(e) => handleValidation(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          maxLength={50}
          debounceDuration={500}
        />
      ),
    },
    {
      id: 'insertedVal12',
      label: 'CIN of Micro Small and Medium Enterprise',
      minWidth: 250,
      align: 'left',
      renderCell: (row) => (
        <FormInput
          inputType="alphaInput"
          name="insertedVal12"
          value={row.insertedVal12 || ''}
          onChange={(e) => handleInputChange(row.id, e)}
          onBlur={(e) => handleValidation(row.id, e)}
          readOnly={!row.isEditing}
          placeholder="Enter value"
          debounceDuration={500}
        />
      ),
    },
  ];

  return (
    <Box>
      <Backdrop sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }} open={isLoading || isSubmitting}>
        <CircularProgress color="inherit" />
      </Backdrop>

      <Box sx={{ display: 'flex', gap: 1, justifyContent: 'left' }}>
        <CustomButton label={'Add Row'} buttonType={'create'} onClickHandler={handleAddRow} disabled={isLoading} />
        <CustomButton
          buttonType={'submit'}
          label={'Complete'}
          disabled={isSubmitting || rows.some((r) => r.isEditing)}
          onClickHandler={handleSubmitReport}
        />
      </Box>

      <Box component={Paper} elevation={3} sx={{ mt: 1 }}>
        <TableContainer component={Paper} sx={{ maxHeight: 650 }}>
          <Table stickyHeader aria-label="sticky table">
            <TableHead>
              <TableRow>
                {columns.map((col) => (
                  <TableCell
                    key={col.id}
                    align={col.align}
                    sx={{
                      fontWeight: 'bold',
                      minWidth: col.minWidth, // Apply the minimum width here
                    }}
                  >
                    {col.label}
                  </TableCell>
                ))}
                <TableCell sx={{ fontWeight: 'bold', minWidth: 150, textAlign: 'center' }}>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row) => (
                <TableRow hover role="checkbox" tabIndex={-1} key={row.id}>
                  {columns.map((col) => (
                    <TableCell key={col.id} align={col.align}>
                      {/* The rendering logic is now extremely clean. It just calls the function. */}
                      {col.renderCell(row)}
                    </TableCell>
                  ))}
                  <TableCell align="center">
                    {row.isEditing ? (
                      <Stack direction={'row'} sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
                        <CustomButton
                          onClickHandler={() => handleSaveRow(row.id)}
                          buttonType={'save'}
                          onlyIconButton={true}
                          toolTip={'Save this row'}
                        />

                        <CustomButton
                          onClickHandler={() => handleCancelEdit(row.id)}
                          buttonType={'reject'}
                          onlyIconButton={true}
                          toolTip={'Cancel Edit'}
                        />
                      </Stack>
                    ) : (
                      <Stack direction={'row'} sx={{ display: 'flex', justifyContent: 'center', gap: 1 }}>
                        <CustomButton
                          onClickHandler={() => handleEditRow(row.id)}
                          buttonType={'edit'}
                          onlyIconButton={true}
                          toolTip={'Edit this row'}
                        />
                        <CustomButton
                          onClickHandler={() => handleDeleteRow(row.id)}
                          buttonType={'delete'}
                          onlyIconButton={true}
                          toolTip={'Delete this row'}
                        />
                      </Stack>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>

        {rows.some((r) => r.isEditing) && (
          <Typography variant="caption" color="error.light" sx={{ mt: 1, display: 'block', textAlign: 'right' }}>
            * Please save all edited rows to enable complete button.
          </Typography>
        )}
      </Box>

      <Dialog
        open={modal.open}
        onClose={handleCloseModal}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">Submission Status</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">{modal.message}</DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseModal} color="primary" autoFocus>
            Continue
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default Table68;
